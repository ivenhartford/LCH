from . import db
import bcrypt
from flask_login import UserMixin
from datetime import datetime


class User(UserMixin, db.Model):
    id = db.Column(db.Integer, primary_key=True)
    username = db.Column(db.String(100), unique=True, nullable=False)
    password_hash = db.Column(db.String(128))
    role = db.Column(db.String(80), nullable=False, default="user")

    def set_password(self, password):
        self.password_hash = bcrypt.hashpw(password.encode("utf-8"), bcrypt.gensalt()).decode("utf-8")

    def check_password(self, password):
        return bcrypt.checkpw(password.encode("utf-8"), self.password_hash.encode("utf-8"))


class Client(db.Model):
    """
    Client (Pet Owner) Model

    Stores information about pet owners/clients.
    Includes contact information, communication preferences, and account details.
    """

    __tablename__ = "client"

    id = db.Column(db.Integer, primary_key=True)

    # Personal Info
    first_name = db.Column(db.String(100), nullable=False)
    last_name = db.Column(db.String(100), nullable=False)
    email = db.Column(db.String(120), unique=True, nullable=True)
    phone_primary = db.Column(db.String(20), nullable=False)
    phone_secondary = db.Column(db.String(20), nullable=True)

    # Address
    address_line1 = db.Column(db.String(200), nullable=True)
    address_line2 = db.Column(db.String(200), nullable=True)
    city = db.Column(db.String(100), nullable=True)
    state = db.Column(db.String(50), nullable=True)
    zip_code = db.Column(db.String(20), nullable=True)

    # Communication Preferences
    preferred_contact = db.Column(db.String(20), default="email")  # email, phone, sms
    email_reminders = db.Column(db.Boolean, default=True)
    sms_reminders = db.Column(db.Boolean, default=True)

    # Account
    account_balance = db.Column(db.Numeric(10, 2), default=0.00)
    credit_limit = db.Column(db.Numeric(10, 2), default=0.00)

    # Notes and Alerts
    notes = db.Column(db.Text, nullable=True)
    alerts = db.Column(db.Text, nullable=True)  # Important alerts (e.g., "Aggressive dog owner")

    # Metadata
    created_at = db.Column(db.DateTime, default=datetime.utcnow, nullable=False)
    updated_at = db.Column(db.DateTime, default=datetime.utcnow, onupdate=datetime.utcnow, nullable=False)
    is_active = db.Column(db.Boolean, default=True, nullable=False)

    # Relationships
    patients = db.relationship("Patient", back_populates="owner", lazy=True, cascade="all, delete-orphan")

    def __repr__(self):
        return f"<Client {self.first_name} {self.last_name}>"

    def to_dict(self):
        """Convert client to dictionary for API responses"""
        return {
            "id": self.id,
            "first_name": self.first_name,
            "last_name": self.last_name,
            "full_name": f"{self.first_name} {self.last_name}",
            "email": self.email,
            "phone_primary": self.phone_primary,
            "phone_secondary": self.phone_secondary,
            "address_line1": self.address_line1,
            "address_line2": self.address_line2,
            "city": self.city,
            "state": self.state,
            "zip_code": self.zip_code,
            "preferred_contact": self.preferred_contact,
            "email_reminders": self.email_reminders,
            "sms_reminders": self.sms_reminders,
            "account_balance": float(self.account_balance) if self.account_balance else 0.0,
            "credit_limit": float(self.credit_limit) if self.credit_limit else 0.0,
            "notes": self.notes,
            "alerts": self.alerts,
            "is_active": self.is_active,
            "created_at": self.created_at.isoformat() if self.created_at else None,
            "updated_at": self.updated_at.isoformat() if self.updated_at else None,
        }


class Patient(db.Model):
    """
    Patient (Cat) Model

    Stores comprehensive information about cat patients at the clinic.
    NOTE: Lenox Cat Hospital is a FELINE-ONLY clinic - all patients are cats.
    """

    __tablename__ = "patient"

    id = db.Column(db.Integer, primary_key=True)

    # Basic Info
    name = db.Column(db.String(100), nullable=False)
    species = db.Column(db.String(50), default="Cat", nullable=False)  # Always "Cat" - feline-only clinic
    breed = db.Column(db.String(100))  # Cat breeds: Persian, Siamese, Maine Coon, Domestic Shorthair, etc.
    color = db.Column(db.String(100))  # Fur color: Orange Tabby, Black, Calico, etc.
    markings = db.Column(db.Text)  # Special markings or patterns

    # Physical Characteristics
    sex = db.Column(db.String(20))  # Male, Female
    reproductive_status = db.Column(db.String(50))  # Intact, Spayed, Neutered
    date_of_birth = db.Column(db.Date, nullable=True)
    approximate_age = db.Column(db.String(50))  # If exact DOB unknown: "2 years", "6 months", etc.
    weight_kg = db.Column(db.Numeric(5, 2))  # Weight in kilograms

    # Identification
    microchip_number = db.Column(db.String(50), unique=True, nullable=True)

    # Insurance
    insurance_company = db.Column(db.String(100))
    insurance_policy_number = db.Column(db.String(100))

    # Owner/Client Link
    owner_id = db.Column(db.Integer, db.ForeignKey("client.id"), nullable=False)

    # Photo
    photo_url = db.Column(db.String(500))  # Local file path or URL to cat photo

    # Medical Info (basic - detailed in medical records)
    allergies = db.Column(db.Text)  # Known allergies
    medical_notes = db.Column(db.Text)  # Important medical notes
    behavioral_notes = db.Column(db.Text)  # Temperament, behavior notes

    # Status
    status = db.Column(db.String(20), default="Active", nullable=False)  # Active, Inactive, Deceased
    deceased_date = db.Column(db.Date, nullable=True)

    # Metadata
    created_at = db.Column(db.DateTime, default=datetime.utcnow, nullable=False)
    updated_at = db.Column(db.DateTime, default=datetime.utcnow, onupdate=datetime.utcnow, nullable=False)

    # Relationships
    owner = db.relationship("Client", back_populates="patients")

    def __repr__(self):
        return f'<Patient {self.name} ({self.breed or "Mixed"})>'

    def to_dict(self):
        """Convert patient to dictionary for API responses"""
        return {
            "id": self.id,
            "name": self.name,
            "species": self.species,
            "breed": self.breed,
            "color": self.color,
            "markings": self.markings,
            "sex": self.sex,
            "reproductive_status": self.reproductive_status,
            "date_of_birth": self.date_of_birth.isoformat() if self.date_of_birth else None,
            "approximate_age": self.approximate_age,
            "age_display": self._calculate_age_display(),
            "weight_kg": float(self.weight_kg) if self.weight_kg else None,
            "microchip_number": self.microchip_number,
            "insurance_company": self.insurance_company,
            "insurance_policy_number": self.insurance_policy_number,
            "owner_id": self.owner_id,
            "owner_name": f"{self.owner.first_name} {self.owner.last_name}" if self.owner else None,
            "photo_url": self.photo_url,
            "allergies": self.allergies,
            "medical_notes": self.medical_notes,
            "behavioral_notes": self.behavioral_notes,
            "status": self.status,
            "deceased_date": self.deceased_date.isoformat() if self.deceased_date else None,
            "created_at": self.created_at.isoformat() if self.created_at else None,
            "updated_at": self.updated_at.isoformat() if self.updated_at else None,
        }

    def _calculate_age_display(self):
        """Calculate and return human-readable age"""
        if self.date_of_birth:
            today = datetime.utcnow().date()
            age_delta = today - self.date_of_birth
            years = age_delta.days // 365
            months = (age_delta.days % 365) // 30

            if years > 0:
                if months > 0:
                    year_str = f'{years} year{"s" if years != 1 else ""}'
                    month_str = f'{months} month{"s" if months != 1 else ""}'
                    return f"{year_str}, {month_str}"
                return f'{years} year{"s" if years != 1 else ""}'
            elif months > 0:
                return f'{months} month{"s" if months != 1 else ""}'
            else:
                weeks = age_delta.days // 7
                if weeks > 0:
                    return f'{weeks} week{"s" if weeks != 1 else ""}'
                return f'{age_delta.days} day{"s" if age_delta.days != 1 else ""}'
        elif self.approximate_age:
            return self.approximate_age
        return "Unknown"


# Keep Pet as an alias for backwards compatibility with existing code
Pet = Patient


<<<<<<< HEAD
class AppointmentType(db.Model):
    """
    AppointmentType Model - Categories of appointments (e.g., Wellness, Surgery, Emergency)

    Used for color-coding calendar, duration defaults, and pricing
    """
    __tablename__ = 'appointment_type'

=======
class Appointment(db.Model):
>>>>>>> phase-1
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(100), nullable=False, unique=True)
    description = db.Column(db.Text)
    default_duration_minutes = db.Column(db.Integer, default=30)  # Default appointment length
    color = db.Column(db.String(7), default='#2563eb')  # Hex color for calendar
    is_active = db.Column(db.Boolean, default=True, nullable=False)
    created_at = db.Column(db.DateTime, default=datetime.utcnow, nullable=False)

    # Relationship
    appointments = db.relationship('Appointment', back_populates='appointment_type', lazy=True)

    def __repr__(self):
<<<<<<< HEAD
        return f'<AppointmentType {self.name}>'

    def to_dict(self):
        return {
            'id': self.id,
            'name': self.name,
            'description': self.description,
            'default_duration_minutes': self.default_duration_minutes,
            'color': self.color,
            'is_active': self.is_active,
            'created_at': self.created_at.isoformat() if self.created_at else None
        }


class Appointment(db.Model):
    """
    Enhanced Appointment Model

    Tracks appointments with patient, client, type, status, assigned staff, and room information.
    Includes full appointment workflow from scheduled to completed.
    """
    __tablename__ = 'appointment'

    id = db.Column(db.Integer, primary_key=True)
    title = db.Column(db.String(200), nullable=False)
    start_time = db.Column(db.DateTime, nullable=False, index=True)
    end_time = db.Column(db.DateTime, nullable=False, index=True)
    description = db.Column(db.Text)

    # Relationships to core entities
    patient_id = db.Column(db.Integer, db.ForeignKey('patient.id'), nullable=True)  # Nullable for client-only appointments
    client_id = db.Column(db.Integer, db.ForeignKey('client.id'), nullable=False, index=True)

    # Appointment categorization
    appointment_type_id = db.Column(db.Integer, db.ForeignKey('appointment_type.id'), nullable=True)

    # Status workflow: scheduled, confirmed, checked_in, in_progress, completed, cancelled, no_show
    status = db.Column(db.String(20), default='scheduled', nullable=False, index=True)

    # Staff and resources
    assigned_staff_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=True)  # Veterinarian/technician
    room = db.Column(db.String(50))  # Exam room identifier

    # Additional tracking
    check_in_time = db.Column(db.DateTime)  # When patient checked in
    actual_start_time = db.Column(db.DateTime)  # When appointment actually started
    actual_end_time = db.Column(db.DateTime)  # When appointment actually ended

    # Cancellation tracking
    cancelled_at = db.Column(db.DateTime)
    cancelled_by_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=True)
    cancellation_reason = db.Column(db.Text)

    # Notes and reminders
    notes = db.Column(db.Text)  # Internal staff notes
    reminder_sent = db.Column(db.Boolean, default=False)
    reminder_sent_at = db.Column(db.DateTime)

    # Timestamps
    created_at = db.Column(db.DateTime, default=datetime.utcnow, nullable=False)
    created_by_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=True)
    updated_at = db.Column(db.DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)

    # Relationships
    patient = db.relationship('Patient', backref='appointments', lazy=True)
    client = db.relationship('Client', backref='appointments', lazy=True)
    appointment_type = db.relationship('AppointmentType', back_populates='appointments', lazy=True)
    assigned_staff = db.relationship('User', foreign_keys=[assigned_staff_id], backref='assigned_appointments', lazy=True)
    cancelled_by = db.relationship('User', foreign_keys=[cancelled_by_id], backref='cancelled_appointments', lazy=True)
    created_by = db.relationship('User', foreign_keys=[created_by_id], backref='created_appointments', lazy=True)

    def __repr__(self):
        return f'<Appointment {self.id}: {self.title} at {self.start_time}>'

    def to_dict(self):
        """Convert appointment to dictionary for API responses"""
        return {
            'id': self.id,
            'title': self.title,
            'start_time': self.start_time.isoformat() if self.start_time else None,
            'end_time': self.end_time.isoformat() if self.end_time else None,
            'description': self.description,
            'patient_id': self.patient_id,
            'patient_name': self.patient.name if self.patient else None,
            'client_id': self.client_id,
            'client_name': f'{self.client.first_name} {self.client.last_name}' if self.client else None,
            'appointment_type_id': self.appointment_type_id,
            'appointment_type_name': self.appointment_type.name if self.appointment_type else None,
            'appointment_type_color': self.appointment_type.color if self.appointment_type else '#2563eb',
            'status': self.status,
            'assigned_staff_id': self.assigned_staff_id,
            'assigned_staff_name': self.assigned_staff.username if self.assigned_staff else None,
            'room': self.room,
            'check_in_time': self.check_in_time.isoformat() if self.check_in_time else None,
            'actual_start_time': self.actual_start_time.isoformat() if self.actual_start_time else None,
            'actual_end_time': self.actual_end_time.isoformat() if self.actual_end_time else None,
            'cancelled_at': self.cancelled_at.isoformat() if self.cancelled_at else None,
            'cancelled_by_name': self.cancelled_by.username if self.cancelled_by else None,
            'cancellation_reason': self.cancellation_reason,
            'notes': self.notes,
            'reminder_sent': self.reminder_sent,
            'reminder_sent_at': self.reminder_sent_at.isoformat() if self.reminder_sent_at else None,
            'created_at': self.created_at.isoformat() if self.created_at else None,
            'created_by_name': self.created_by.username if self.created_by else None,
            'updated_at': self.updated_at.isoformat() if self.updated_at else None,
=======
        return f"<Appointment {self.title}>"


class Visit(db.Model):
    """
    Visit Model - Records of patient visits to the clinic

    A visit represents a patient coming to the clinic for medical care.
    Each visit can have associated SOAP notes, vital signs, diagnoses, and prescriptions.
    """

    __tablename__ = "visit"

    id = db.Column(db.Integer, primary_key=True)

    # Basic Info
    visit_date = db.Column(db.DateTime, default=datetime.utcnow, nullable=False)
    visit_type = db.Column(db.String(50), nullable=False)  # Wellness, Sick, Emergency, Follow-up, Surgery, etc.
    status = db.Column(
        db.String(20), default="scheduled", nullable=False
    )  # scheduled, in_progress, completed, cancelled

    # Patient and Staff Links
    patient_id = db.Column(db.Integer, db.ForeignKey("patient.id"), nullable=False)
    veterinarian_id = db.Column(db.Integer, db.ForeignKey("user.id"), nullable=True)  # Vet who saw the patient
    appointment_id = db.Column(
        db.Integer, db.ForeignKey("appointment.id"), nullable=True
    )  # Link to appointment if created from one

    # Visit Details
    chief_complaint = db.Column(db.Text)  # Main reason for visit
    visit_notes = db.Column(db.Text)  # General visit notes

    # Metadata
    created_at = db.Column(db.DateTime, default=datetime.utcnow, nullable=False)
    updated_at = db.Column(db.DateTime, default=datetime.utcnow, onupdate=datetime.utcnow, nullable=False)
    completed_at = db.Column(db.DateTime, nullable=True)

    # Relationships
    patient = db.relationship("Patient", backref="visits")
    veterinarian = db.relationship("User", backref="visits_conducted")
    soap_notes = db.relationship("SOAPNote", back_populates="visit", cascade="all, delete-orphan")
    vital_signs = db.relationship("VitalSigns", back_populates="visit", cascade="all, delete-orphan")
    diagnoses = db.relationship("Diagnosis", back_populates="visit", cascade="all, delete-orphan")
    vaccinations = db.relationship("Vaccination", back_populates="visit", cascade="all, delete-orphan")

    def __repr__(self):
        return f"<Visit {self.id} - Patient {self.patient_id} - {self.visit_date}>"

    def to_dict(self):
        """Convert visit to dictionary for API responses"""
        return {
            "id": self.id,
            "visit_date": self.visit_date.isoformat() if self.visit_date else None,
            "visit_type": self.visit_type,
            "status": self.status,
            "patient_id": self.patient_id,
            "patient_name": self.patient.name if self.patient else None,
            "veterinarian_id": self.veterinarian_id,
            "veterinarian_name": self.veterinarian.username if self.veterinarian else None,
            "appointment_id": self.appointment_id,
            "chief_complaint": self.chief_complaint,
            "visit_notes": self.visit_notes,
            "created_at": self.created_at.isoformat() if self.created_at else None,
            "updated_at": self.updated_at.isoformat() if self.updated_at else None,
            "completed_at": self.completed_at.isoformat() if self.completed_at else None,
        }


class VitalSigns(db.Model):
    """
    Vital Signs Model - Records vital signs taken during a visit

    Stores temperature, weight, heart rate, respiratory rate, etc.
    """

    __tablename__ = "vital_signs"

    id = db.Column(db.Integer, primary_key=True)
    visit_id = db.Column(db.Integer, db.ForeignKey("visit.id"), nullable=False)

    # Vital Signs
    temperature_c = db.Column(db.Numeric(4, 1), nullable=True)  # Temperature in Celsius
    weight_kg = db.Column(db.Numeric(5, 2), nullable=True)  # Weight in kilograms
    heart_rate = db.Column(db.Integer, nullable=True)  # Beats per minute
    respiratory_rate = db.Column(db.Integer, nullable=True)  # Breaths per minute
    blood_pressure_systolic = db.Column(db.Integer, nullable=True)  # mmHg
    blood_pressure_diastolic = db.Column(db.Integer, nullable=True)  # mmHg
    capillary_refill_time = db.Column(db.String(20), nullable=True)  # e.g., "<2 seconds"
    mucous_membrane_color = db.Column(db.String(50), nullable=True)  # Pink, Pale, Cyanotic, etc.
    body_condition_score = db.Column(db.Integer, nullable=True)  # 1-9 scale

    # Additional Info
    pain_score = db.Column(db.Integer, nullable=True)  # 0-10 scale
    notes = db.Column(db.Text, nullable=True)

    # Metadata
    recorded_at = db.Column(db.DateTime, default=datetime.utcnow, nullable=False)
    recorded_by_id = db.Column(db.Integer, db.ForeignKey("user.id"), nullable=True)

    # Relationships
    visit = db.relationship("Visit", back_populates="vital_signs")
    recorded_by = db.relationship("User")

    def __repr__(self):
        return f"<VitalSigns Visit {self.visit_id}>"

    def to_dict(self):
        """Convert vital signs to dictionary for API responses"""
        return {
            "id": self.id,
            "visit_id": self.visit_id,
            "temperature_c": float(self.temperature_c) if self.temperature_c else None,
            "weight_kg": float(self.weight_kg) if self.weight_kg else None,
            "heart_rate": self.heart_rate,
            "respiratory_rate": self.respiratory_rate,
            "blood_pressure_systolic": self.blood_pressure_systolic,
            "blood_pressure_diastolic": self.blood_pressure_diastolic,
            "capillary_refill_time": self.capillary_refill_time,
            "mucous_membrane_color": self.mucous_membrane_color,
            "body_condition_score": self.body_condition_score,
            "pain_score": self.pain_score,
            "notes": self.notes,
            "recorded_at": self.recorded_at.isoformat() if self.recorded_at else None,
            "recorded_by_id": self.recorded_by_id,
            "recorded_by_name": self.recorded_by.username if self.recorded_by else None,
        }


class SOAPNote(db.Model):
    """
    SOAP Note Model - Clinical notes following SOAP format

    SOAP = Subjective, Objective, Assessment, Plan
    Standard format for medical record documentation
    """

    __tablename__ = "soap_note"

    id = db.Column(db.Integer, primary_key=True)
    visit_id = db.Column(db.Integer, db.ForeignKey("visit.id"), nullable=False)

    # SOAP Components
    subjective = db.Column(db.Text, nullable=True)  # Patient history, owner's observations, symptoms
    objective = db.Column(db.Text, nullable=True)  # Physical exam findings, test results, vital signs
    assessment = db.Column(db.Text, nullable=True)  # Diagnosis, differential diagnosis
    plan = db.Column(db.Text, nullable=True)  # Treatment plan, medications, follow-up instructions

    # Metadata
    created_at = db.Column(db.DateTime, default=datetime.utcnow, nullable=False)
    updated_at = db.Column(db.DateTime, default=datetime.utcnow, onupdate=datetime.utcnow, nullable=False)
    created_by_id = db.Column(db.Integer, db.ForeignKey("user.id"), nullable=False)

    # Relationships
    visit = db.relationship("Visit", back_populates="soap_notes")
    created_by = db.relationship("User")

    def __repr__(self):
        return f"<SOAPNote Visit {self.visit_id}>"

    def to_dict(self):
        """Convert SOAP note to dictionary for API responses"""
        return {
            "id": self.id,
            "visit_id": self.visit_id,
            "subjective": self.subjective,
            "objective": self.objective,
            "assessment": self.assessment,
            "plan": self.plan,
            "created_at": self.created_at.isoformat() if self.created_at else None,
            "updated_at": self.updated_at.isoformat() if self.updated_at else None,
            "created_by_id": self.created_by_id,
            "created_by_name": self.created_by.username if self.created_by else None,
        }


class Diagnosis(db.Model):
    """
    Diagnosis Model - Medical diagnoses assigned during visits

    Includes ICD-10 codes for standardization
    """

    __tablename__ = "diagnosis"

    id = db.Column(db.Integer, primary_key=True)
    visit_id = db.Column(db.Integer, db.ForeignKey("visit.id"), nullable=False)

    # Diagnosis Info
    diagnosis_name = db.Column(db.String(200), nullable=False)
    icd_code = db.Column(db.String(20), nullable=True)  # ICD-10 code
    diagnosis_type = db.Column(db.String(50), default="primary")  # primary, differential, rule-out
    severity = db.Column(db.String(20), nullable=True)  # mild, moderate, severe
    status = db.Column(db.String(20), default="active")  # active, resolved, chronic, ruled-out

    # Additional Details
    notes = db.Column(db.Text, nullable=True)
    onset_date = db.Column(db.Date, nullable=True)
    resolution_date = db.Column(db.Date, nullable=True)

    # Metadata
    created_at = db.Column(db.DateTime, default=datetime.utcnow, nullable=False)
    created_by_id = db.Column(db.Integer, db.ForeignKey("user.id"), nullable=False)

    # Relationships
    visit = db.relationship("Visit", back_populates="diagnoses")
    created_by = db.relationship("User")

    def __repr__(self):
        return f"<Diagnosis {self.diagnosis_name} ({self.icd_code})>"

    def to_dict(self):
        """Convert diagnosis to dictionary for API responses"""
        return {
            "id": self.id,
            "visit_id": self.visit_id,
            "diagnosis_name": self.diagnosis_name,
            "icd_code": self.icd_code,
            "diagnosis_type": self.diagnosis_type,
            "severity": self.severity,
            "status": self.status,
            "notes": self.notes,
            "onset_date": self.onset_date.isoformat() if self.onset_date else None,
            "resolution_date": self.resolution_date.isoformat() if self.resolution_date else None,
            "created_at": self.created_at.isoformat() if self.created_at else None,
            "created_by_id": self.created_by_id,
            "created_by_name": self.created_by.username if self.created_by else None,
        }


class Vaccination(db.Model):
    """
    Vaccination Model - Vaccination records

    Tracks all vaccines administered to patients
    """

    __tablename__ = "vaccination"

    id = db.Column(db.Integer, primary_key=True)

    # Patient and Visit Link
    patient_id = db.Column(db.Integer, db.ForeignKey("patient.id"), nullable=False)
    visit_id = db.Column(db.Integer, db.ForeignKey("visit.id"), nullable=True)  # Visit when vaccine was given

    # Vaccine Info
    vaccine_name = db.Column(db.String(200), nullable=False)  # FVRCP, Rabies, FeLV, etc. (cat vaccines)
    vaccine_type = db.Column(db.String(100), nullable=True)  # Core, Non-core, Lifestyle-dependent
    manufacturer = db.Column(db.String(100), nullable=True)
    lot_number = db.Column(db.String(100), nullable=True)
    serial_number = db.Column(db.String(100), nullable=True)

    # Administration Details
    administration_date = db.Column(db.Date, nullable=False)
    expiration_date = db.Column(db.Date, nullable=True)
    next_due_date = db.Column(db.Date, nullable=True)  # When next dose/booster is due
    dosage = db.Column(db.String(50), nullable=True)
    route = db.Column(db.String(50), nullable=True)  # SC (subcutaneous), IM (intramuscular), etc.
    administration_site = db.Column(db.String(100), nullable=True)  # Right shoulder, etc.

    # Status
    status = db.Column(db.String(20), default="current")  # current, overdue, not_due, declined

    # Notes
    notes = db.Column(db.Text, nullable=True)
    adverse_reactions = db.Column(db.Text, nullable=True)

    # Metadata
    administered_by_id = db.Column(db.Integer, db.ForeignKey("user.id"), nullable=True)
    created_at = db.Column(db.DateTime, default=datetime.utcnow, nullable=False)

    # Relationships
    patient = db.relationship("Patient", backref="vaccinations")
    visit = db.relationship("Visit", back_populates="vaccinations")
    administered_by = db.relationship("User")

    def __repr__(self):
        return f"<Vaccination {self.vaccine_name} - Patient {self.patient_id}>"

    def to_dict(self):
        """Convert vaccination to dictionary for API responses"""
        return {
            "id": self.id,
            "patient_id": self.patient_id,
            "patient_name": self.patient.name if self.patient else None,
            "visit_id": self.visit_id,
            "vaccine_name": self.vaccine_name,
            "vaccine_type": self.vaccine_type,
            "manufacturer": self.manufacturer,
            "lot_number": self.lot_number,
            "serial_number": self.serial_number,
            "administration_date": (self.administration_date.isoformat() if self.administration_date else None),
            "expiration_date": self.expiration_date.isoformat() if self.expiration_date else None,
            "next_due_date": self.next_due_date.isoformat() if self.next_due_date else None,
            "dosage": self.dosage,
            "route": self.route,
            "administration_site": self.administration_site,
            "status": self.status,
            "notes": self.notes,
            "adverse_reactions": self.adverse_reactions,
            "administered_by_id": self.administered_by_id,
            "administered_by_name": self.administered_by.username if self.administered_by else None,
            "created_at": self.created_at.isoformat() if self.created_at else None,
>>>>>>> phase-1
        }
